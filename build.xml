<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     2011/09/28 12:50:31                                                        

     GenomeMuseum    
     GenomeMuseum 0.9
                   
     higuchi                                                                
     ====================================================================== -->
<project name="GenomeMuseum" default="run-jar" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
            GenomeMuseum 0.9
    </description>
    <property name="genomemuseum.assembled"
        value="${basedir}/target/scala-2.9.1/genomemuseum_2.9.1-0.9a1.min.jar"/>
    
    <property name="build.dest" location="build"/>
    <property name="build.jar.assembled" location="${build.dest}/genomemuseum.jar"/>
    <property name="build.resources" location="build-resources"/>

    <property name="build.mac.app.name" value="GenomeMuseum.app"/>
    <property name="build.resources.macbundle" location="${build.resources}/Mac OS Bundle"/>
    <property name="build.win.exe.name" value="GenomeMuseum.exe"/>
    
    <property file="project/build.properties"/>
    
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ivy2" />
    <property name="ivy.install.dir" value="${ivy.home}/lib" />
    <property name="ivy.install.dest" value="${ivy.install.dir}/ivy.jar" />
    
    <!-- for ivy -->
    <target name="-check-ivy-user-installed" description="check ivy jar file existence on user's ivy home">
        <available file="${ivy.install.dest}" property="ivy.install.dest.exisits" />
    </target>

    <target name="-taskdef-user-ivy" depends="-check-ivy-user-installed" if="ivy.install.dest.exisits">
        <path id="ivy.install.path">
            <fileset dir="${ivy.install.dir}" includes="*.jar" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" 
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.install.path"/>
    </target>

    <!-- jar ファイルが存在するかどうか -->
    <condition property="genomemuseum.assembled.exists">
        <available file="${genomemuseum.assembled}"></available>
    </condition>
    
    <!-- Classpaths -->
    <path id="classpath.main">
        <pathelement location="${classes.main.dir}"/>
        <pathelement location="${src.main.resources.dir}" />
    </path>
    <path id="classpath.test">
        <pathelement location="${classes.test.dir}"/>
        <pathelement location="${src.test.resources.dir}" />
    </path>

    <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="init">
    </target>
    
    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${lib.dir}"/>
    </target>

    <!-- ================================= 
          target: Resolve dependency              
         ================================= -->
    <target name="resolve" description="Resolve dependency" depends="-taskdef-user-ivy">
        <property name="ivy.retrieve.pattern" value="${ivy.lib.dir}/[conf]/[artifact]-[revision].[ext]" />
        
        <mkdir dir="${ivy.lib.dir}/default"/>
        <mkdir dir="${ivy.lib.dir}/test"/>
        <ivy:retrieve symlink="${ivy.retrieve.symlink}" />
        
        <!-- Class Paths -->
        <path id="classpath.lib.default" >
            <fileset dir="${ivy.lib.dir}/default" includes="*.jar" />
        </path>
        <path id="classpath.lib.test" >
            <fileset dir="${ivy.lib.dir}/test" includes="*.jar" />
        </path>
    </target>
    
    <!-- ================================= 
          target: Compile              
         ================================= -->
    <target name="compile" depends="init, resolve" description="Compile main java sources">
        <mkdir dir="${classes.main.dir}"/>
        <javac destdir="${classes.main.dir}" source="${javac.source}" target="${javac.target}"
                encoding="UTF-8" debug="${javac.debug}" debuglevel="source,lines,vars" includeantruntime="false">
            <src path="${src.main.java.dir}" />
            <classpath refid="classpath.lib.default" />
        </javac>
    </target>

    <!-- ================================= 
          target: create jar file              
         ================================= -->
    <target name="jar" depends="compile" description="Create jar file">
        <jar destfile="${build.jar.file}">
            <fileset dir="${classes.main.dir}" />
            <fileset dir="${src.main.resources.dir}" />
            <manifest>
                <attribute name="Main-Class" value="${run.main}" />
            </manifest>
        </jar>
    </target>
    
    <!-- ================================= 
          target: Compile for test              
         ================================= -->
    <target name="compile-test" depends="compile" description="compile sources for testing">
        <mkdir dir="${classes.test.dir}"/>
        <javac destdir="${classes.test.dir}" source="${javac.source}" target="${javac.target}"
                encoding="UTF-8" debug="${javac.debug}" debuglevel="source,lines,vars" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <src path="${src.test.java.dir}" />
            <classpath refid="classpath.main" />
            <classpath refid="classpath.lib.test" />
        </javac>
    </target>

    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="sbt-proguard" depends="depends" description="GenomeMuseum 0.9"
            unless="genomemuseum.assembled.exists">
        <exec executable="sbt">
            <arg line="compile test package proguard"/>
  	</exec>
    </target>

    <!-- ================================= 
          target: assemble-jar              
         ================================= -->
    <target name="assemble-jar" depends="depends, sbt-proguard" description="description">
        <delete file="build.jar.assembled" />
        <copy file="${genomemuseum.assembled}" tofile="${build.jar.assembled}" />
    </target>

    <!-- ================================= 
          target: run-jar              
         ================================= -->
    <target name="run-jar" depends="resolve" description="target ディレクトリの jar を実行する">
        <pathconvert pathsep=":" dirsep="/" property="jar.runtime.classpath">
            <path refid="classpath.lib.default" />
        </pathconvert>

        <echoproperties prefix="jar.runtime.classpath">
        </echoproperties>

        <exec executable="java">
            <arg value="-Dfile.encoding=UTF-8"/>
            <arg value="-Xms128m"/>
            <arg value="-Xmx1024m"/>
            <arg value="-classpath"/>
            <arg value="${jar.runtime.classpath}"/>
            <arg value="-jar"/>
            <arg value="${build.jar.file}"/>
        </exec>
    </target>

    
    <!-- ================================= 
          target: build-mac-app              
         ================================= -->
    <target name="build-mac-app" depends="depends, assemble-jar" description="description">
        <property name="build.dest.mac.app" location="${build.dest}/${build.mac.app.name}"/>
        
        <delete dir="${build.dest.mac.app}" />
        <copy todir="${build.dest.mac.app}">
            <fileset dir="${build.resources.macbundle}"></fileset>
        </copy>
        <copy file="${build.jar.assembled}"
            tofile="${build.dest.mac.app}/Contents/Resources/Java/genomemuseum.jar" />
        <tar destfile="${build.dest.mac.app}.tar">
            <tarfileset dir="${build.dest}" includes="${build.mac.app.name}/**" />
            <tarfileset mode="0755" dir="${build.dest}">
                <include name="${build.mac.app.name}/Contents/MacOS/JavaApplicationStub"/>
            </tarfileset>
        </tar>
        <delete dir="${build.dest.mac.app}" />
    </target>

    <!-- ================================= 
          target: build-win-exe              
         ================================= -->
    <target name="build-win-exe" depends="depends, assemble-jar" description="description">
        <property name="build.dest.win.exe" location="${build.dest}/${build.win.exe.name}"/>
        <!-- ${launch4j.home} launch4j.jar と lib/xstream.jar があるディレクトリを指定しておく。 -->
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
            classpath="${launch4j.home}/launch4j.jar:${launch4j.home}/xstream.jar" />
        <launch4j configFile="${build.resources}/launch4j.xml"
            jar="${build.jar.assembled}"
            outfile="${build.dest.win.exe}" />
    </target>
    
    <!-- ================================= 
          target: build-all              
         ================================= -->
    <target name="build-all" depends="build-mac-app, build-win-exe"
    	    description="Mac OS 用 と Windows 用アプリケーションを作成する。">
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: depends                      
         - - - - - - - - - - - - - - - - - -->
    <target name="depends">
        <mkdir dir="${build.dest}"/>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: jooq-retrieve                      
         - - - - - - - - - - - - - - - - - -->
    <target name="jooq-retrieve" description="jOOQ タスク用ライブラリを取得する">
        <!-- ライブラリ解決 -->
        <ivy:retrieve file="${ivy.file}" conf="jooq" pattern="${lib.dir}/[conf]/[artifact].[ext]"  />
    </target>

    
    <!-- ================================= 
          target: jooq-codegen              
         ================================= -->
    <target name="jooq-codegen" description="jOOQ を利用してエンティティコードを作成する">
        <!-- ライブラリ解決 -->
        <ivy:resolve file="${ivy.file}"/>
        <ivy:cachepath pathid="ivy.jooq.classpath" conf="jooq" />

        <property name="build.dest" location="build"/>
        
        <!-- データベースを作業場所に一時構築 -->
        <delete includeemptydirs="true" dir="${jooq.temp.dir}"/>
        <mkdir dir="${jooq.temp.dir}"/>
        
        <sql userid="genomemuseum" password="" driver="org.h2.Driver" encoding="utf-8"
                url="jdbc:h2:file:${jooq.temp.dir}/genomemuseum"
                classpathref="ivy.jooq.classpath">
            <transaction>create schema V1_0_0;</transaction>
            <transaction>SET SCHEMA V1_0_0;</transaction>
            <transaction src="${src.main.resources.dir}/jp/scid/genomemuseum/model/sql/schema.sql" />
            <transaction src="${src.main.resources.dir}/jp/scid/genomemuseum/model/sql/sequences.sql" />
        </sql>
        
        <!-- Task definition -->
        <taskdef name="generate-classes" classname="org.jooq.util.GenerationTask" classpathref="ivy.jooq.classpath"/>
        
        <java fork="true" classname="org.jooq.util.GenerationTool">
            <classpath>
                <path refid="ivy.jooq.classpath"></path>
                <pathelement path="."/>
            </classpath>
            <arg value="/project/jooq-config.xml"/>
        </java>
    </target>

    <!-- ================================= 
          target: h2-start              
         ================================= -->
    <target name="h2-server-start" depends="depends" description="description">
        <!-- ライブラリ解決 -->
        <ivy:resolve file="${ivy.file}"/>
        <ivy:cachepath pathid="ivy.jooq.classpath" conf="jooq" />
        
        <java fork="true" classname="org.h2.tools.Server" spawn="true">
            <classpath refid="ivy.jooq.classpath" />
        </java>
    </target>
</project>
