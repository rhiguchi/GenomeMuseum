<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     2011/09/28 12:50:31                                                        

     GenomeMuseum    
     GenomeMuseum 0.9
                   
     higuchi                                                                
     ====================================================================== -->
<project name="GenomeMuseum" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
            GenomeMuseum 0.9
    </description>
    <property name="genomemuseum.assembled"
        value="${basedir}/target/scala-2.9.1/genomemuseum_2.9.1-0.9a1.min.jar"/>
    
    <property name="build.dest" location="build"/>
    <property name="build.resources" location="build-resources"/>

    <property name="build.mac.app.name" value="GenomeMuseum.app"/>
    <property name="build.resources.macbundle" location="${build.resources}/Mac OS Bundle"/>
    <property name="build.win.exe.name" value="GenomeMuseum.exe"/>
    
    <property file="project/build.properties"/>
    <property file="project/build.default.properties"/>
    
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ivy2" />
    <property name="ivy.install.dir" value="${ivy.home}/lib" />
    <property name="ivy.install.dest" value="${ivy.install.dir}/ivy.jar" />
    
    <!-- for ivy -->
    <target name="-check-ivy-user-installed" description="check ivy jar file existence on user's ivy home">
        <available file="${ivy.install.dest}" property="ivy.install.dest.exisits" />
    </target>

    <target name="-taskdef-user-ivy" depends="-check-ivy-user-installed" if="ivy.install.dest.exisits">
        <path id="ivy.install.path">
            <fileset dir="${ivy.install.dir}" includes="*.jar" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" 
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.install.path"/>
    </target>

    <!-- Classpaths -->
    <path id="classpath.main">
        <pathelement location="${classes.main.dir}"/>
        <pathelement location="${src.main.resources.dir}" />
    </path>
    <path id="classpath.test">
        <pathelement location="${classes.test.dir}"/>
        <pathelement location="${src.test.resources.dir}" />
    </path>

    <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="init">
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" description="clean the project">
        <delete includeemptydirs="true" dir="${build.dir}"/>
        <delete includeemptydirs="true" dir="${dist.dir}"/>
    </target>
    
    <target name="clean-lib" description="clean lib dir">
        <delete dir="${lib.dir}"/>
    </target>
    
    <!-- ================================= 
          target: Resolve dependency              
         ================================= -->
    <target name="retrieve" description="retrieve dependencies with ivy">
        <ivy:retrieve symlink="true" />
    </target>
    
    <!-- ================================= 
          target: Compile              
         ================================= -->
    <target name="compile" depends="init" description="Compile main java sources">
        <mkdir dir="${classes.main.dir}"/>

        <copy todir="${classes.main.dir}">
            <fileset dir="${src.main.java.dir}" excludes="**/*.java" />
            <fileset dir="${src.main.resources.dir}"/>
        </copy>

        <path id="lib.compile.path">
            <fileset dir="${lib.compile.dir}" includes="**/*.jar" />
        </path>
        
        <javac destdir="${classes.main.dir}" source="1.6" target="1.6"
                encoding="UTF-8" debug="true" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <src path="${src.main.java.dir}" />
            
            <classpath refid="lib.compile.path" />
        </javac>
    </target>


    <!-- ================================= 
          target: create jar file              
         ================================= -->
    <target name="jar" depends="compile" description="make a jar file for this project">
        <jar destfile="${package.file}">
            <fileset dir="${classes.main.dir}" />
            <manifest>
                <attribute name="Main-Class" value="${run.main}" />
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Build-Version" value="${version}" />
            </manifest>
        </jar>
    </target>

    
    <!-- ================================= 
          target: package-sources
         ================================= -->
    <target name="jar-sources" depends="init" description="description">
        <zip destfile="${source.file}">
            <fileset dir="${src.main.java.dir}" includes="**/*.java" />
        </zip>
    </target>
    
    <!-- ================================= 
          target: create Javadoc              
         ================================= -->
    <target name="javadoc" depends="compile" description="Create Javadoc">
        <javadoc destdir="${javadoc.dir}" encoding="UTF-8" source="1.6" author="true" version="true"
                access="${javadoc.access}" docencoding="UTF-8" charset="UTF-8" doctitle="${javadoc.title}">
            <arg value="-J-Dfile.encoding=UTF-8"/>
            <classpath refid="lib.compile.path" />
            <sourcepath path="${src.main.java.dir}"/>
            <link href="${javadoc.api-ref.javase}"/>
        </javadoc>
    </target>
    
    <!-- ================================= 
          target: package-javadoc
         ================================= -->
    <target name="jar-javadoc" depends="" description="description">
        <jar basedir="${javadoc.dir}" destfile="${javadoc.file}"/>
    </target>

    
    <!-- ================================= 
          target: Compile for test              
         ================================= -->
    <target name="compile-test" depends="compile" description="compile sources for testing">
        <mkdir dir="${classes.test.dir}"/>
        <javac destdir="${classes.test.dir}" source="${javac.source}" target="${javac.target}"
                encoding="UTF-8" debug="${javac.debug}" debuglevel="source,lines,vars" includeantruntime="false">
            <compilerarg value="-Xlint:all"/>
            <src path="${src.test.java.dir}" />
            <classpath refid="classpath.main" />
            <classpath refid="classpath.lib.test" />
        </javac>
    </target>

    <target name="build" depends="jar, javadoc, jar-javadoc, jar-sources, proguard, build-mac-app, build-win-exe"
            description="make a jar file for this project">
    </target>


    <!-- ================================= 
          target: run              
         ================================= -->
    <target name="run" depends="compile" description="description">
        <java classname="${run.main}" failonerror="true" fork="true" classpath="${classes.main.dir}">
            <jvmarg line="-Dfile.encoding=UTF-8 -Xms128m -Xmx1024m" />
            <classpath>
            	<fileset dir="${lib.default.dir}" includes="**/*.jar" />
            </classpath>
        </java>
    </target>
    
    <!-- ================================= 
         target: proguard               
         ================================= -->
    <target name="proguard" depends="jar" description="description">
        <path id="lib.compile.path">
            <fileset dir="${lib.compile.dir}" includes="**/*.jar" />
        </path>
        
        <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.ant.path}"/>
        <proguard configuration="${project.dir}/proguard.conf" optimize="false" obfuscate="false"
 	       printmapping="${build.dir}/proguard-map.txt">
 	   <libraryjar path="${proguard.java.home.classes}"/>
 	   <injar path="${package.file}"/>
 	   <injar refid="lib.compile.path" filter="!META-INF/MANIFEST.MF,!META-INF/LICENSE.txt,!META-INF/NOTICE.txt"/>
            
 	   <outjar path="${package.min.file}" />
        </proguard>
    </target>

    <!-- ================================= 
 	 target: run with min-jar              
 	================================= -->
    <target name="start" depends="" description="description">
        <exec executable="java">
	    <arg value="-Dfile.encoding=UTF-8"/>
	    <arg value="-Xms128m"/>
	    <arg value="-Xmx1024m"/>
	    <arg value="-jar"/>
	    <arg value="${package.min.file}"/>
	</exec>
    </target>

    <!-- ================================= 
          target: build-mac-app              
         ================================= -->
    <target name="build-mac-app" depends="" description="description">
        <property name="build.dest.mac.app" location="${build.dest}/${build.mac.app.name}"/>
        
        <delete dir="${build.dest.mac.app}" />
        <copy todir="${build.dest.mac.app}">
            <fileset dir="${build.resources.macbundle}"></fileset>
        </copy>
        <copy file="${package.min.file}"
            tofile="${build.dest.mac.app}/Contents/Resources/Java/genomemuseum.jar" />
        <tar destfile="${build.dest.mac.app}.tar">
            <tarfileset dir="${build.dest}" includes="${build.mac.app.name}/**" />
            <tarfileset mode="0755" dir="${build.dest}">
                <include name="${build.mac.app.name}/Contents/MacOS/JavaApplicationStub"/>
            </tarfileset>
        </tar>
        <delete dir="${build.dest.mac.app}" />
    </target>

    <!-- ================================= 
          target: build-win-exe              
         ================================= -->
    <target name="build-win-exe" depends="" description="description">
        <property name="build.dest.win.exe" location="${build.dest}/${build.win.exe.name}"/>
        <!-- ${launch4j.home} launch4j.jar と lib/xstream.jar があるディレクトリを指定しておく。 -->
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
            classpath="${launch4j.home}/launch4j.jar:${launch4j.home}/xstream.jar" />
        <launch4j configFile="${build.resources}/launch4j.xml"
            jar="${package.min.file}"
            outfile="${build.dest.win.exe}" />
    </target>
</project>
